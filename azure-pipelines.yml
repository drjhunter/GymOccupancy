# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master



stages:
- stage: Build
  variables:
    System.Debug: true
    buildPlatform: 'Any CPU'
    buildConfiguration: 'Release'
  jobs:
  - job: BuildWebApp
    pool:
      vmImage: 'vs2017-win2016'
    variables:
      nugetFile: 'charting-webapp/NuGet.config'
      projectFile: 'charting-webapp/charting-webapp.csproj'

  
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'
        nugetConfigPath: $(nugetFile)



    # - task: DotNetCoreCLI@2
    #   displayName: 'dotnet build webapi'
    #   inputs:
    #     command: 'build'
    #     projects: '**/charting-webapi.csproj'
    #     platform: '$(buildPlatform)'
    #     configuration: '$(buildConfiguration)'
    #     arguments: '--no-restore'
    #     output:    

    - task: DotNetCoreCLI@2
      displayName: 'dotnet build webapp'
      inputs:
        command: 'build'
        projects: '**/charting-webapp.csproj'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
        arguments: '--no-restore --output ./charting-webapp'   

    - task: DotNetCoreCLI@2
      displayName: 'dotnet publish webapp'
      inputs:
        projects: '**/charting-webapp/charting-webapp.csproj'
        command: publish
        publishWebProjects: True
        arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: True

    # - task: DotNetCoreCLI@2
    #   displayName: 'dotnet publish webapi'
    #   inputs:
    #     projects: '**/charting-webapi/charting-webapi.csproj'
    #     command: publish
    #     publishWebProjects: True
    #     arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    #     zipAfterPublish: True

    - script: echo 'B'
    - task: PublishBuildArtifacts@1
      displayName: 'publish artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        
 

- stage: DeployWebApp
  jobs:
  - job: Deploy
    pool: 
      vmImage: 'vs2017-win2016'
    variables:
      - group: GymOccupancyVG
    steps:
    - script: echo $(GymWebApiUrl)
    - task: DownloadBuildArtifacts@0
      displayName: 'download build artifact'
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'drop'
        downloadPath: '$(System.DefaultWorkingDirectory)'
    - task: AzureRmWebAppDeployment@4
      displayName: 'Azure RM deploy'
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: 'Az400JulyHotmailAzureFreePassExpires190820'
        appType: 'webApp'
        WebAppName: 'chartin-webapp'
        packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'
        AppSettings: '-PROJECT charting-webapp/charting-webapp.csproj -Apis:gymwebapiurl $(GymWebApiUrl)'


