# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

variables:
  azureResourceManagerConnection: 'Az400JulyHotmailAzureFreePassExpires190820'
  subscriptionId: 'bbcb1ada-eb77-417b-9831-57926cf2e274'
  resourceGroupName: 'charting-rg'
  location: 'UK South'
  appNameFn: 'gymoccupancyfn'  
  appNameWebApi: 'gymoccupancywebapi'   
  appNameWebApp: 'gymoccupancywebapp'  

stages:
- stage: Build

  jobs:
  - job: Build
    pool:
      vmImage: 'vs2017-win2016'
    variables:
      nugetFile: './NuGet.config'
      System.Debug: false
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'

  
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'
        feedsToUse: 'config'
        nugetConfigPath: $(nugetFile)

    - task: DotNetCoreCLI@2
      displayName: 'dotnet build all web projects'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet publish just function app!'
      inputs:
        command: publish
        publishWebProjects: false
        projects: '**/charting-functions.csproj'
        arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'
        zipAfterPublish: True

    - task: DotNetCoreCLI@2
      displayName: 'dotnet publish all web projects as separate zip'
      inputs:
        command: publish
        publishWebProjects: True
        arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'
        zipAfterPublish: True

    - script: echo 'B'

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/charting-env'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/charting-env.zip'
        replaceExistingArchive: true

    - task: PublishBuildArtifacts@1
      displayName: 'publish artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'

- stage: Deploy
  jobs:
  - job: Deploy
    pool: 
      vmImage: 'vs2017-win2016'
    variables:
      - group: GymOccupancyKeyVaultVG
      - group: GymOccupancyVG
    steps:
    - script: echo $(GymWebApiUrl)
    - task: DownloadBuildArtifacts@0
      displayName: 'download build artifact'
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'drop'
        downloadPath: '$(System.DefaultWorkingDirectory)'

    - task: ExtractFiles@1
      inputs:
        archiveFilePatterns: '**/charting-env.zip'
        destinationFolder: '$(System.DefaultWorkingDirectory)/env'
        cleanDestinationFolder: true

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: 'Get-ChildItem -path $(System.DefaultWorkingDirectory) -Recurse'

    - task: AzureResourceManagerTemplateDeployment@3
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: $(azureResourceManagerConnection)
        subscriptionId: $(subscriptionId)
        action: 'Create Or Update Resource Group'
        resourceGroupName: $(resourceGroupName)
        location: $(location)
        templateLocation: 'URL of the file'
        csmFileLink: '$(System.DefaultWorkingDirectory)/**/function-app/azuredeploy.json'
        overrideParameters: '-appName $(appNameFn) -runtime dotnet -storageAccountType Standard_LRS'
        deploymentMode: 'Incremental'

    - task: AzureFunctionApp@1
      displayName: 'Azure Function App Deploy: gymoccupancy'
      inputs:
        azureResourceManagerConnection: Az400JulyHotmailAzureFreePassExpires190820
        appType: functionApp
        appName: gymoccupancy   
        package: '$(System.DefaultWorkingDirectory)/charting-env/function-app/charting-functions.zip'
        AppSettings: '-gymoccupancystor_STORAGE $(GymStorage) -AzureWebJobsStorage $(GymStorage) -CosmosDBConnection $(GymCosmos)'

    - task: AzureRmWebAppDeployment@4
      displayName: 'Azure RM deploy'
      inputs:
        ConnectionType: 'AzureRM'
        azureResourceManagerConnection: 'Az400JulyHotmailAzureFreePassExpires190820'
        appType: 'webApp'
        WebAppName: 'chartin-webapp'
        packageForLinux: '$(System.DefaultWorkingDirectory)/**/charting-webapp.zip'
        AppSettings: '-PROJECT charting-webapp/charting-webapp.csproj -Apis:gymwebapiurl $(GymWebApiUrl)'
    - task: AzureRmWebAppDeployment@4
      displayName: 'Azure RM deploy'
      inputs:
        ConnectionType: 'AzureRM'
        azureResourceManagerConnection: 'Az400JulyHotmailAzureFreePassExpires190820'
        appType: 'webApp'
        WebAppName: 'chartin-webapi'
        packageForLinux: '$(System.DefaultWorkingDirectory)/**/charting-webapi.zip'
        AppSettings: '-PROJECT charting-webapi/charting-webapi.csproj'

